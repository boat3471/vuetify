{"version":3,"sources":["../../../../src/zui/components/ZMessage/ZMessageSingleBase.ts"],"names":[],"mappings":"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","sourcesContent":["import mixins from '../../../util/mixins'\nimport { ZSnackbar } from '../../../components/VSnackbar/ZSnackbar'\nimport { ZMessageItem } from '../../../../types'\n\nexport const ZMessageSingleBase = mixins(ZSnackbar).extend({\n  name: 'z-message-single-base',\n  props: {\n    offsetTop: {\n      type: Number,\n      default: 8,\n    },\n    itemGap: {\n      type: Number,\n      default: 8,\n    },\n    itemHeight: {\n      type: Number,\n      default: 42,\n    },\n    top: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  mounted () {\n    const { duration } = this.$props\n    const that = this as any\n    const list = this.getList()\n    const wrapper = this.$refs.wrapper as HTMLDivElement\n    if (wrapper) {\n      wrapper.style.opacity = '1'\n      list.push({\n        id: that._uid,\n        duration: duration <= 0 ? -1 : duration,\n        vnode: that,\n        el: wrapper,\n        index: list.length,\n      })\n    }\n  },\n  methods: {\n    getList (): ZMessageItem[] {\n      if (this.$message) {\n        const { getMessageList } = this.$message\n        return getMessageList ? getMessageList() : []\n      }\n      return []\n    },\n    genWrapper () {\n      const list = this.getList()\n      const wrapper = (ZSnackbar as any).options.methods.genWrapper.call(this)\n      const currentTop = this.offsetTop + (list.length * (this.itemGap + this.itemHeight))\n      wrapper.data.style = {\n        top: `${currentTop}px`,\n      }\n      wrapper.data.ref = 'wrapper'\n      return wrapper\n    },\n    setTimeout () {\n      const that = this as any\n      window.clearTimeout(that.activeTimeout)\n      const timeout = Number(that.timeout)\n      if (!that.isActive) {\n        this.resetLocation()\n      }\n      if (!that.isActive || [0, -1].includes(timeout)) {\n        return\n      }\n\n      that.activeTimeout = window.setTimeout(() => {\n        this.resetLocation()\n      }, timeout)\n    },\n    resetLocation () {\n      const that = this as any\n      const list = this.getList()\n      const item = list.find(i => i.id === that._uid)\n      if (item) {\n        // 从池子中删除当前弹窗\n        list.splice(item.index, 1)\n        // 设置当前通知透明度为0;\n        item.el.style.opacity = '0'\n        // 设置当前通知位置，移出界面;\n        item.el.style.top = `${this.offsetTop + ((item.index - 1) * (this.itemGap + this.itemHeight))}px`\n        // 重置所有通知位置及其索引\n        this.resetAll(item.index)\n      }\n\n      // 等待动画结束后移除\n      setTimeout(() => {\n        that.isActive = false\n      }, 400)\n    },\n    resetAll (index = 0) {\n      const list = this.getList()\n      list.forEach((item, i) => {\n        if (i >= index) {\n          const top = this.offsetTop + (i * (this.itemGap + this.itemHeight))\n          item.el.style.top = `${top}px`\n        }\n        item.index = i\n      })\n    },\n  },\n  render (createElement): any {\n    if (!this.isActive) {\n      return createElement('')\n    }\n    return createElement('div', {\n      staticClass: 'v-snack',\n      class: this.classes,\n      style: this.styles,\n    }, [this.transition !== false ? this.genTransition() : this.genWrapper()])\n  },\n})\n\nexport default ZMessageSingleBase\n"],"sourceRoot":"","file":"ZMessageSingleBase.js"}