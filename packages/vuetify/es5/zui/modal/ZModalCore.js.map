{"version":3,"sources":["../../../src/zui/modal/ZModalCore.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue'\n// @ts-ignore\nimport ModalComponent from '../components/modal.vue'\nimport { UICore } from '../UICore'\n\n/**\n * 是否初始化完成\n * @internal\n */\nlet initialized = false\n\n/**\n * 弹窗视图组件\n * @internal\n */\nconst ZModal = Vue.extend(ModalComponent)\n\n/**\n * 弹窗选项基类\n * @internal\n */\nexport interface ModalOptionsBase {\n  /**\n   * 标题\n   */\n  title?: string\n\n  /**\n   * 消息内容\n   */\n  message?: string\n\n  /**\n   * 消息内容是否使用html格式\n   */\n  html?: boolean\n\n  /**\n   * 是否显示取消按钮\n   */\n  showCancel?: boolean\n\n  /**\n   * 是否显示关闭按钮\n   */\n  showClose?: boolean\n\n  /**\n   * 取消按钮文本\n   */\n  labelCancel?: string\n\n  /**\n   * 确认按钮文本\n   */\n  labelSure?: string\n\n  /**\n   * 顶部的距离\n   */\n  top?: number | string\n\n  /**\n   * 延迟确认\n   */\n  delay?: number\n\n  /**\n   * 关闭时触发函数\n   * @param autoClose 是否自动关闭\n   */\n  onClose?(autoClose: boolean): void\n}\n\nexport type ModalType = 'info' | 'success' | 'warn' | 'warning' | 'error' | 'system' | 'confirm';\n\n/**\n * 消息选项\n */\nexport interface ModalOptions extends ModalOptionsBase {\n  /**\n   * 弹窗类型: info|success|warn|error\n   */\n  type?: ModalType\n  /**\n   * 图标\n   */\n  icon?: string\n}\n\n/**\n * 弹窗结果\n */\nexport interface ModalResult {\n  close: () => ModalResult\n  then: (handle: Function) => ModalResult\n  catch: (handle: Function) => ModalResult\n}\n\n/**\n * 消息核心处理器\n */\nexport class ZModalCore {\n  /**\n   * 显示消息\n   * @param options\n   */\n  show (options: ModalOptions | string): ModalResult {\n    let propsData: ModalOptions = {\n      message: '',\n    }\n    if (typeof options === 'string') {\n      propsData.message = options\n    }\n\n    if (typeof options === 'object') {\n      propsData = options as ModalOptions\n      propsData.top = options.top ? options.top + '' : ''\n    }\n\n    const comp = new ZModal({ propsData, parent: UICore.$app }).$mount()\n    const result = {\n      close () {\n        (comp as any).closeForceFun()\n        return result\n      },\n      then (handle: Function) {\n        (comp as any).setSureBeforeFun(handle)\n        return result\n      },\n      catch (handle: Function) {\n        (comp as any).setCancelBeforeFun(handle)\n        return result\n      },\n    }\n    return result\n  }\n\n  /**\n   * 常规消息\n   * @param message\n   * @param options\n   */\n  info (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      message: message || '',\n      type: 'info',\n      icon: 'mdi-information',\n      labelSure: options ? options.labelSure : '知道了',\n      showCancel: false,\n    })\n  }\n\n  /**\n   * 成功消息\n   * @param message\n   * @param options\n   */\n  success (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      message: message || '',\n      type: 'success',\n      icon: 'mdi-check-circle',\n      labelSure: options ? options.labelSure : '知道了',\n      showCancel: false,\n    })\n  }\n\n  /**\n   * 告警消息\n   * @param message\n   * @param options\n   */\n  warn (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.warning(message, options)\n  }\n\n  /**\n   * 告警消息\n   * @param message\n   * @param options\n   */\n  warning (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      message: message || '',\n      type: 'warning',\n      icon: 'mdi-alert-circle',\n      labelSure: options ? options.labelSure : '知道了',\n      showCancel: false,\n    })\n  }\n\n  /**\n   * 错误消息\n   * @param message\n   * @param options\n   */\n  error (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      message: message || '',\n      type: 'error',\n      icon: 'mdi-close-circle',\n      labelSure: options ? options.labelSure : '知道了',\n      showCancel: false,\n    })\n  }\n\n  /**\n   * 系统提示\n   * @param message\n   * @param options\n   */\n  system (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      title: options ? options.title : '提示',\n      message: message || '',\n      type: 'system',\n      labelSure: options ? options.labelSure : '知道了',\n      showCancel: false,\n    })\n  }\n\n  /**\n   * 确认\n   * @param message\n   * @param options\n   */\n  confirm (message: string, options?: ModalOptionsBase): ModalResult {\n    return this.show({\n      ...options,\n      message: message || '',\n      type: 'confirm',\n      // icon: 'mdi-help-circle-outline',\n    })\n  }\n\n  /**\n   * 关闭所有\n   */\n  closeAll () {\n    // 关闭所以弹窗;\n  }\n}\n\n/**\n * 全局通知实例:\n * 1. 可在vue组件内部使用 `this.$modal` <br>\n * 2. 可引入使用 `import {modal} = '@zwd/z-ui';`\n */\nconst core = new ZModalCore()\n\n/**\n * 消息组件安装\n * @internal\n */\nfunction install () {\n  if (!initialized) {\n    initialized = true\n  }\n\n  Vue.prototype.getModalList = function () {\n    const w = window as any\n    let list = w.__ZUI_MODAL_LIST\n    if (!list) {\n      list = []\n      w.__ZUI_MODAL_LIST = list\n    }\n    return list\n  }\n\n  Vue.mixin({\n    beforeCreate () {\n      const $options = this.$options\n      if ($options.modal) {\n        this.$modal = core\n      } else {\n        $options.parent && (this.$modal = $options.parent.$modal)\n      }\n    },\n  })\n}\n\nVue.use(install)\n\nexport { core as modal, install }\n"],"sourceRoot":"","file":"ZModalCore.js"}