{"version":3,"sources":["../../../src/zui/mixins/ZColorSelectorMixin.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue'\n\n/**\n * 最大历史个数\n * @type {number}\n */\nconst maxHistoryLength = 9\n\n/**\n * 历史颜色\n * @type {string[]}\n */\nconst historyColors: string[] = []\n\n/**\n * 主题色选项列表\n */\nconst themeColorOptions: ThemeColor[] = [\n  { label: '主要色', name: 'primary' },\n  { label: '次要色', name: 'secondary' },\n  { label: '成功色', name: 'success' },\n  { label: '错误色', name: 'error' },\n  { label: '警告色', name: 'warning' },\n]\n\ninterface ThemeColor {\n  label: string\n  name: string\n  color?: string\n}\n\ninterface ColorValidInfo {\n  valid: boolean\n  value?: string\n  rgb?: string\n  hex?: string\n}\n\nexport interface ColorInfo {\n  name: string\n  color: string\n  value?: string\n}\n\nexport const ZColorSelectorMixin = Vue.extend({\n  props: {\n    defaultValue: {\n      type: String,\n      default: '',\n    },\n  },\n  methods: {\n    /**\n     * 获取历史颜色列表\n     * @return {string[]}\n     */\n    getHistoryColors () {\n      return historyColors\n    },\n\n    /**\n     * 获取所有主题色选项列表\n     * @return {[]}\n     */\n    getThemeColorOptions () {\n      return themeColorOptions\n    },\n\n    /**\n     * 获取Vuetify主题色\n     * @param name\n     */\n    getVuetifyThemeColor (name: string): any {\n      const { dark, themes } = this.$vuetify.theme\n      if (dark) {\n        return themes.dark[name]\n      }\n      return themes.light[name]\n    },\n\n    /**\n     * 根据名称获取主题选项\n     * @param name\n     * @return {{}}\n     */\n    findThemeByName (name: string) {\n      const theme = themeColorOptions.find(i => (i.name === name || i.color === name))\n      if (theme) {\n        if (!theme.color) {\n          theme.color = this.getVuetifyThemeColor(theme.name)\n        }\n        return theme\n      }\n      return null\n    },\n\n    /**\n     * 根据名称获取颜色信息\n     * @param value 色值\n     */\n    getColorByName (value = ''): ColorInfo {\n      value = value.trim()\n      const data = {\n        name: '',\n        color: this.defaultValue,\n        valid: true,\n      }\n\n      if (value === 'none' || value === '') {\n        data.name = 'none'\n        data.color = ''\n        data.valid = false\n      }\n\n      if (value && value !== 'none') {\n        const theme = this.findThemeByName(value)\n        if (theme) {\n          data.name = theme.name\n          data.color = theme.color || ''\n        } else {\n          const info = this.getColorInfo(value)\n          data.valid = info.valid\n          if (info.valid) {\n            data.name = value\n            data.color = info.hex || ''\n          }\n        }\n      }\n      return data\n    },\n\n    /**\n     * 添加历史色\n     */\n    addHistoryColor (color: string) {\n      const foundIndex = historyColors.indexOf(color)\n      if (foundIndex !== -1) {\n        return\n      }\n      if (historyColors.length >= maxHistoryLength) {\n        historyColors.shift()\n      }\n      historyColors.push(color)\n    },\n\n    /**\n     * 获取颜色信息\n     */\n    getColorInfo (strColor: string): ColorValidInfo {\n      strColor = (strColor || '').trim()\n      const option = new Option()\n      const style = option.style\n      style.display = 'none'\n      style.color = strColor\n      const valid = !!style.color\n      if (valid) {\n        document.body.append(option)\n        const color = getComputedStyle(option).color\n        option.remove()\n        const rgb = color.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',')\n        const r = parseInt(rgb[0])\n        const g = parseInt(rgb[1])\n        const b = parseInt(rgb[2])\n        // eslint-disable-next-line no-bitwise\n        const hex = '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n        return {\n          valid,\n          value: strColor,\n          rgb: color,\n          hex: hex.toLocaleUpperCase(),\n        }\n      }\n      return {\n        valid: false,\n      }\n    },\n  },\n})\n\nconst tempColorInfo: ColorInfo = { name: '', color: '' }\n\nZColorSelectorMixin.prototype.tempColorInfo = tempColorInfo\n\nexport default ZColorSelectorMixin\n"],"sourceRoot":"","file":"ZColorSelectorMixin.js"}